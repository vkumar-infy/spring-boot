pipeline {
    agent any // Specifies that the pipeline can run on any available agent

    tools {
        // Define the Gradle tool to use (configure in Jenkins Global Tool Configuration)
        // Example: 'Gradle_7_6' should match the name configured in Jenkins
        gradle 'Gradle_7_6' 
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone your Git repository
                git url: 'https://github.com/vkumar-infy/spring-boot.git',
                    branch: 'main' // Or your desired branch
            }
        }

        stage('Build') {
            steps {
                // Execute Gradle build task
                sh 'gradle clean build'
            }
        }

        stage('Test') {
            steps {
                // Execute Gradle test task
                sh 'gradle test'
            }
            post {
                always {
                    // Publish JUnit test results (if generated by Gradle)
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }

        stage('Package Docker Image') {
            steps {
                echo "Staging is skipped..."
                // Assuming you have a Dockerfile in your project root
                //script {
                    // Build Docker image
                 //   sh "docker build -t your-spring-boot-app:latest ."
               // }
            }
        }

        stage('Deploy') {
            when {
                // Only deploy if the current branch is 'main'
                branch 'main'
            }
            steps {
                // Example: Deploy to a server using SSH or a deployment script
                // sh 'ssh user@your-server "docker run -d --name your-app -p 8080:8080 your-spring-boot-app:latest"'
                echo "Deploying to production environment..."
            }
        }
    }

    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
        failure {
            // Send notification on build failure
            echo "Build failed! Sending notification..."
            // Add notification steps here (e.g., email, Slack)
        }
        success {
            echo "Build successful!"
        }
    }
}
